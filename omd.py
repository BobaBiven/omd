import random
import time
import math


def step1():
    print(
        '–£—Ç–∫–∞-–º–∞–ª—è—Ä ü¶Ü —Ä–µ—à–∏–ª–∞ –≤—ã–ø–∏—Ç—å –∑–∞–π—Ç–∏ –≤ –±–∞—Ä. '
        '–í–∑—è—Ç—å –µ–π –∑–æ–Ω—Ç–∏–∫? ‚òÇÔ∏è \n'
    )
    option = ''
    options = {'–¥–∞': True, '–Ω–µ—Ç': False}
    while option not in options:
        print('–í—ã–±–µ—Ä–∏—Ç–µ: {}/{}'.format(*options))
        option = input()

    if options[option]:
        return step2_umbrella()
    return step2_no_umbrella()


def step2_umbrella():
    print('–£—Ç–∫–∞ –≤–∑—è–ª–∞ –∑–æ–Ω—Ç–∏–∫ \n–£–∑–Ω–∞–µ–º, –∏–¥–µ—Ç –ª–∏ –¥–æ–∂–¥—å \n...')
    time.sleep(1.5)
    if random.randint(0, 2) == 0:
        print('–ù–µ –∏–¥–µ—Ç, –Ω—É –∏ –ª–∞–¥–Ω–æ, –∑–æ–Ω—Ç –ª–∏—à–Ω–∏–º –Ω–µ –±—ã–≤–∞–µ—Ç')
    else:
        print('–ò–¥–µ—Ç, –∑–æ–Ω—Ç –ø—Ä–∏–≥–æ–¥–∏–ª—Å—è')
    return 0


def step2_no_umbrella():
    print('–£—Ç–∫–∞ –Ω–µ –≤–∑—è–ª–∞ –∑–æ–Ω—Ç–∏–∫ \n–£–∑–Ω–∞–µ–º, –∏–¥–µ—Ç –ª–∏ –¥–æ–∂–¥—å \n ...')
    time.sleep(1.5)
    if random.randint(0, 2) == 0:
        print('–ù–µ –∏–¥–µ—Ç, –ø–æ–≤–µ–∑–ª–æ')
    else:
        print('–ò–¥–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –∑–∞ –Ω–∏–º –≤–µ—Ä–Ω—É—Ç—å—Å—è?')
        option = ''
        options = {'–¥–∞': True, '–Ω–µ—Ç': False}
        while option not in options:
            print('–í—ã–±–µ—Ä–∏—Ç–µ: {}/{}'.format(*options))
            option = input()

        if options[option]:
            return step3_came_back()
        return step3_not_came_back()


def step3_not_came_back():
    print('–£—Ç–∫–∞ –∑–∞–º–µ—Ä–∑–ª–∞ –∏ –∑–∞–±–æ–ª–µ–ª–∞, –æ—á–µ–Ω—å –∂–∞–ª—å!')
    return 0


def step3_came_back():
    # —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤ —É—Ä–∞–≤–Ω–µ–Ω–∏–∏ –¥–∞–ª–µ–µ
    a = random.randint(2, 11)
    b = random.randint(1, 11)
    c = random.randint(1, 11)

    # —Ç—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–æ–≤–Ω–æ 2 –∫–æ—Ä–Ω—è (–ª–µ–Ω—å –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏)
    while b**2 - 4 * a * c <= 0:
        a = random.randint(2, 11)
        b = random.randint(1, 11)
        c = random.randint(1, 11)

    print('–£—Ç–∫–∞ –∑–∑–∞–±—ã–ª–∞ –ø–∞—Ä–æ–ª—å –æ—Ç –¥–æ–º–æ—Ñ–æ–Ω–∞, –ø–æ–º–æ–≥–∏—Ç–µ –µ–π –≤–æ–π—Ç–∏ –≤ –ø–æ–¥—ä–µ–∑–¥')
    print(f'–ß—Ç–æ–±—ã –≤–≤–æ–π—Ç–∏ –≤ –ø–æ–¥—ä–µ–∑–¥ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ä–µ—à–µ–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏—è: '
          f'{a}x^2 + {b}x + {c} = 0 (2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)')

    x_1, x_2 = get_quadratic_equation_roots(a, b, c)
    a, b = [float(x) for x in input().split()]

    while (round(max(x_1, x_2), 2) != max(a, b)
           or round(min(x_1, x_2), 2) != min(a, b)):
        print('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        a, b = [float(x) for x in input().split()]

    print('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å, —É —É—Ç–∫–∏ –≤—Å–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ!')
    return 0


def get_quadratic_equation_roots(a, b, c):
    return ((-b - math.sqrt(b**2 - 4 * a * c)) / (2 * a),
            (-b + math.sqrt(b**2 - 4 * a * c)) / (2 * a))


if __name__ == '__main__':
    step1()
